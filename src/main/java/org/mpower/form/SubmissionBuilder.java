package org.mpower.form;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javassist.compiler.ast.Variable;

import javax.annotation.PostConstruct;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathFactory;

import opensrpadapter.AdapterProperties;

import org.mockito.internal.creation.util.SearchingClassLoader;
import org.mpower.http.HTTPAgent;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Configuration;
import org.springframework.stereotype.Component;

import com.fasterxml.jackson.core.JsonGenerationException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

@Configuration
@EnableConfigurationProperties(AdapterProperties.class)
public class SubmissionBuilder {
	private static final String FORMS_DIR = "forms/";
	private static String OPENSRP_BASE_URL = "";
	private static final String SUBMISSION_URL = "http://localhost:9979/form-submissions/";	
	private static final String LOCATION_URL = "http://localhost:9979/user-location?location-name=";
	private static final String OPENSRP_USER = "sohel";
	private static final String OPENSRP_PWD = "Sohel@123";
	private static FormSubmission formSubmission;
	private static FormInstance formInstance;
	private static HTTPAgent httpagent;
	protected static String entityID = "";
	protected static HashMap<String, String> variableMapperForForm = new HashMap<String, String>();
		    
	public static String buildFormSubmission(String formName) {
		System.out.println("Base URL Load from Properties Class : " + OPENSRP_BASE_URL);
		String formRename = formName;
		if(formName.equalsIgnoreCase("pvf_form")){
			System.out.println("Received a pvf_form");
			formRename = "birthnotificationpregnancystatusfollowup";
			variableMapperForForm.put("formName", "birthnotificationpregnancystatusfollowup");
		}
		variableMapper(formRename);
		if(!variableMapperForForm.containsKey("entityID")){
			System.out.println("autogenerated uuid assigned in entityID");
			variableMapperForForm.put("entityID", UUID.randomUUID().toString());
		}
		writeFormSubmission(formRename);
		entityID = variableMapperForForm.get("entityID");
		variableMapperForForm.clear();
		return entityID;
	}

	public static void variableMapper(String formName){
		InputStream input = SubmissionBuilder.class.getClassLoader().getResourceAsStream(FORMS_DIR + formName + "_mapper.csv");
		System.out.println("input stream for mapper" + input );
		
		try {
			BufferedReader br = new BufferedReader(new InputStreamReader(input));//new FileReader(mapperSource));
			String line;
			
			while ((line = br.readLine()) != null) {
				String[] strings = line.split(",");
				if(strings.length == 2)
					variableMapperForForm.put(strings[0].trim(), strings[1].trim());
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private static String getFormInstance(String formName) {
		ObjectMapper mapper = new ObjectMapper();

		try {
			// read from file, convert it to FormSubmission class
			formInstance = mapper.readValue(SubmissionBuilder.class.getClassLoader().getResourceAsStream(FORMS_DIR + formName + "_read.json")
						, FormInstance.class);
			formInstance.buildFormInstance();		
		} catch (JsonGenerationException e) {
			e.printStackTrace();
		} catch (JsonMappingException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} 
		Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
		return gson.toJson(formInstance);
	}

	private static void writeFormSubmission(String formName) {	
		String jsonPayload = mapToFormSubmissionDTO(formName);
		System.out.println("json from xml-- " + jsonPayload);
		httpagent = new HTTPAgent();
		System.out.println("Submission Failure: " + httpagent.post(SUBMISSION_URL, jsonPayload).isFailure());
		//System.out.println("submission to opensrp deactivated.");
		//System.out.println("json is prepared but not posted yet.");
	}
	
	private static String getAnmID (String locationName){
		HTTPAgent httpAgent = new HTTPAgent();
		System.out.println("Anm location name:" + locationName );
		//return httpAgent.fetch(LOCATION_URL + locationName).payload();
		return "opensrp";
	}

	private static String mapToFormSubmissionDTO(String formName) {
		//List<FormSubmission> formSubmissions = new ArrayList<FormSubmission>();
		List<org.ei.drishti.dto.form.FormSubmissionDTO> formSubmissions = new ArrayList<org.ei.drishti.dto.form.FormSubmissionDTO>();
		String instanceID = UUID.randomUUID().toString();
		String formInstanceString = getFormInstance(formName);
		
		/*long number = (long) Math.floor(Math.random() * 9000000000000L) + 1000000000000L;
		String strLong = Long.toString(number);*/
		
		formSubmissions.add(new org.ei.drishti.dto.form.FormSubmissionDTO(
				searchInXML("/data/fwaName").replaceAll("^\"|\"$", ""), instanceID, SubmissionBuilder.entityID,
				formName, formInstanceString, 
				"1446376434966", formInstance.form_data_definition_version));
		/*formSubmissions.add(new FormSubmission(	getAnmID(searchInXML("/data/woman/MauzaparaName")).replaceAll("^\"|\"$", ""), 
				instanceID, "new_household_registration", entityID, "1435819226470", "9",
				formInstance));*/
		//Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
		return new Gson().toJson(formSubmissions);
	}
	
	private static String searchInXML(String nodePath) {

		String nodeValue = "";
		try {
			XPath xPath = XPathFactory.newInstance().newXPath();
			nodeValue = xPath.compile(nodePath).evaluate(XMLData.getXmlDocument());
		} catch (Exception e) {
			// TODO: handle exception
		}
		//System.out.println("Finding nodePath: " + nodePath + " ,nodeValue: " + nodeValue);
		return nodeValue;

	}
}
